{"ast":null,"code":"var _jsxFileName = \"C:\\\\personal projects\\\\crud-redux\\\\src\\\\PostForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass PostForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const title = this.getTitle.value;\n      const message = this.getMessage.value;\n      const data = {\n        id: new Date(),\n        title,\n        message\n      };\n      this.props.dispatch({\n        //passing in the data object with a type of ‘ADD_POST’.\n        type: 'ADD_POST',\n        data\n      });\n      this.getTitle.value = '';\n      this.getMessage.value = '';\n      console.log(data); // dispatch an action to send this data to reducer via connect() to tell reducer all sorts of events happening\n    };\n  }\n\n  //connect() return a function which takes in your current component as an argument and returns a new component with dispatch method as it’s prop.\n  //it gives access to state  of store object using mapstat  \n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Create Post\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      required: true,\n      type: \"text\",\n      ref: input => this.getTitle = input,\n      placeholder: \"Enter Post Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      required: true,\n      rows: \"5\",\n      ref: input => this.getMessage = input,\n      cols: \"28\",\n      placeholder: \"Enter Post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Post\")));\n  }\n\n}\n\nexport default connect()(PostForm); //So in here the form element now accepts an onSubmit event.\n// Whenever this event takes place the handleSubmit function will execute.\n//The handleSubmit function takes one argument which is the event. \n//Calling e.preventDefault() will prevent the page from refreshing. \n//Next we grab the value of the title and the message from the inputs using refs and then put them inside an object called data.\n// We also have an id property whose value is set to whatever new Date() returns.\n// We will use this id property to perform update and delete operations.","map":{"version":3,"sources":["C:/personal projects/crud-redux/src/PostForm.js"],"names":["React","Component","connect","PostForm","handleSubmit","e","preventDefault","title","getTitle","value","message","getMessage","data","id","Date","props","dispatch","type","console","log","render","input"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AACA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SAC7BG,YAD6B,GACbC,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,KAAK,GAAG,KAAKC,QAAL,CAAcC,KAA5B;AACA,YAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgBF,KAAhC;AACA,YAAMG,IAAI,GAAG;AACTC,QAAAA,EAAE,EAAE,IAAIC,IAAJ,EADK;AAETP,QAAAA,KAFS;AAGTG,QAAAA;AAHS,OAAb;AAKA,WAAKK,KAAL,CAAWC,QAAX,CAAoB;AAAC;AACjBC,QAAAA,IAAI,EAAE,UADU;AACCL,QAAAA;AADD,OAApB;AAGA,WAAKJ,QAAL,CAAcC,KAAd,GAAsB,EAAtB;AACA,WAAKE,UAAL,CAAgBF,KAAhB,GAAwB,EAAxB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ,EAdkB,CAcC;AACtB,KAhB4B;AAAA;;AAiB7B;AACU;AACVQ,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI;AAAM,MAAA,QAAQ,EAAE,KAAKhB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,QAAQ,MAAf;AAAgB,MAAA,IAAI,EAAC,MAArB;AAA4B,MAAA,GAAG,EAAGiB,KAAD,IAAW,KAAKb,QAAL,GAAgBa,KAA5D;AAAmE,MAAA,WAAW,EAAC,kBAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EACwG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADxG,EAC8G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD9G,EAEI;AAAU,MAAA,QAAQ,MAAlB;AAAmB,MAAA,IAAI,EAAC,GAAxB;AAA4B,MAAA,GAAG,EAAGA,KAAD,IAAW,KAAKV,UAAL,GAAkBU,KAA9D;AAAqE,MAAA,IAAI,EAAC,IAA1E;AACI,MAAA,WAAW,EAAC,YADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAIU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJV,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,CAFJ,CADJ;AAYH;;AAhC4B;;AAkCjC,eAAenB,OAAO,GAAIC,QAAJ,CAAtB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nclass PostForm extends Component {\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const title = this.getTitle.value;\r\n        const message = this.getMessage.value;\r\n        const data = {\r\n            id: new Date(),\r\n            title,\r\n            message\r\n        }\r\n        this.props.dispatch({//passing in the data object with a type of ‘ADD_POST’.\r\n            type: 'ADD_POST',data\r\n        });\r\n        this.getTitle.value = '';\r\n        this.getMessage.value = '';\r\n        console.log(data); // dispatch an action to send this data to reducer via connect() to tell reducer all sorts of events happening\r\n    }\r\n    //connect() return a function which takes in your current component as an argument and returns a new component with dispatch method as it’s prop.\r\n              //it gives access to state  of store object using mapstat  \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Create Post</h1>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input required type=\"text\" ref={(input) => this.getTitle = input} placeholder=\"Enter Post Title\" /><br /><br />\r\n                    <textarea required rows=\"5\" ref={(input) => this.getMessage = input} cols=\"28\"\r\n                        placeholder=\"Enter Post\" />\r\n                    <br /><br />\r\n                    <button>Post</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default connect() (PostForm);\r\n//So in here the form element now accepts an onSubmit event.\r\n// Whenever this event takes place the handleSubmit function will execute.\r\n//The handleSubmit function takes one argument which is the event. \r\n//Calling e.preventDefault() will prevent the page from refreshing. \r\n//Next we grab the value of the title and the message from the inputs using refs and then put them inside an object called data.\r\n// We also have an id property whose value is set to whatever new Date() returns.\r\n// We will use this id property to perform update and delete operations.\r\n"]},"metadata":{},"sourceType":"module"}